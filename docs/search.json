[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Neal Haddaway. Author, maintainer. Matt Grainger. Author. Matt Jones. Author. Alice Stuart. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Haddaway N, Grainger M, Jones M, Stuart (2024). bibfix: Repair enrich bibliographic data. R package version 0.0.0.9.","code":"@Manual{,   title = {bibfix: Repair and enrich bibliographic data},   author = {Neal Haddaway and Matt Grainger and Matt Jones and Alice Stuart},   year = {2024},   note = {R package version 0.0.0.9}, }"},{"path":"/index.html","id":"bibfix-","dir":"","previous_headings":"","what":"Repair and enrich bibliographic data","title":"Repair and enrich bibliographic data","text":"bibfix R package (future plans Shiny app) helps users repair enrich bibliographic data. suite functions request bibliographic data API services including CrossRef Lens.org. Repaired fields can include titles, abstract, unique identifiers (e.g. DOIs), publication years, etc. addition, bibliographic records can supplemented additional information, including internal identifiers common databases (e.g. Lens.org, PubMed, Microsoft Academic) facilitate deduplication, information author affiliations identifiers (e.g. ORCIDs). package work progress part Evidence Synthesis Hackathon. Please cite package : Haddaway NR, Grainger MJ, Jones ML Stuart (2021). bibfix: R package Shiny app repairing enriching bibliographic data. https://github.com/nealhaddaway/bibfix.","code":""},{"path":"/reference/build_ris.html","id":null,"dir":"Reference","previous_headings":"","what":"Build RIS files from other sources — build_ris","title":"Build RIS files from other sources — build_ris","text":"Builds RIS file based basic input fields corresponding minimum information deduplication record identification external API sources (e.g. CrossRef).","code":""},{"path":"/reference/build_ris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build RIS files from other sources — build_ris","text":"","code":"build_ris(data, save = FALSE, filename = \"export\", path = NULL)"},{"path":"/reference/build_ris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build RIS files from other sources — build_ris","text":"save Logical argument specify whether output file saved .ris file. filename Optional name output file save = TRUE. Default 'export'. path Path file saved. input dataframe object containing bibliographic data. item independent line dataframe. dataframe must contain columns named follows: 'authors', 'year', 'title', 'source', 'volume', 'issue', 'start_page', 'end_page', 'doi'.","code":""},{"path":"/reference/build_ris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build RIS files from other sources — build_ris","text":"RIS formatted text file saved desired path.","code":""},{"path":"/reference/build_ris.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build RIS files from other sources — build_ris","text":"","code":"if (FALSE) { # \\dontrun{ data <- read.csv('inst/extdata/data.csv') ris <- build_ris(data, save=TRUE) } # }"},{"path":"/reference/crawl_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup DOI from publisher URL — crawl_url","title":"Lookup DOI from publisher URL — crawl_url","text":"Takes publisher URL article, downloads page code extracts first doi URL (.e. URL contains 'doi.org').","code":""},{"path":"/reference/crawl_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup DOI from publisher URL — crawl_url","text":"","code":"crawl_url(url)"},{"path":"/reference/crawl_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup DOI from publisher URL — crawl_url","text":"url publisher URL article contain doi within link.","code":""},{"path":"/reference/crawl_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup DOI from publisher URL — crawl_url","text":"character string corresponding DOI.","code":""},{"path":"/reference/crawl_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup DOI from publisher URL — crawl_url","text":"","code":"if (FALSE) { # \\dontrun{ url <- 'https://www.sciencedirect.com/science/article/pii/S0048969703000068' doi <- crawl_url(url) } # }"},{"path":"/reference/crawl_urls.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup DOIs from publisher URLs — crawl_urls","title":"Lookup DOIs from publisher URLs — crawl_urls","text":"Takes vector publisher URLs article, downloads page code extracts first doi URLs page (.e. URL contains 'doi.org').","code":""},{"path":"/reference/crawl_urls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup DOIs from publisher URLs — crawl_urls","text":"","code":"crawl_urls(urls)"},{"path":"/reference/crawl_urls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup DOIs from publisher URLs — crawl_urls","text":"url vector strings corresponding publisher URL article contain doi within link.","code":""},{"path":"/reference/crawl_urls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup DOIs from publisher URLs — crawl_urls","text":"vector character strings corresponding DOIs.","code":""},{"path":"/reference/crawl_urls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup DOIs from publisher URLs — crawl_urls","text":"","code":"if (FALSE) { # \\dontrun{ urls <- c('https://www.sciencedirect.com/science/article/pii/S0048969703000068',          'https://www.cambridge.org/core/journals/aquatic-living-resources/article/differences-in-abiotic-water-conditions-between-fluvial-reaches-and-crayfish-fauna-in-some-northern-rivers-of-the-iberian-peninsula/94940FBD4D49B6E36857CD074DA72FB6',          'https://www.publish.csiro.au/MF/MF04111') dois <- crawl_urls(url) } # }"},{"path":"/reference/decode_dois.html","id":null,"dir":"Reference","previous_headings":"","what":"Decode DOIs (digital object identifiers) — decode_dois","title":"Decode DOIs (digital object identifiers) — decode_dois","text":"Replace URL encoded DOIs (often exported bibliographic databases search tools like Publish Perish, e.g. '%28' = '(') original special character encoding (e.g. '(').","code":""},{"path":"/reference/decode_dois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decode DOIs (digital object identifiers) — decode_dois","text":"","code":"decode_dois(dois, keep_http = TRUE)"},{"path":"/reference/decode_dois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decode DOIs (digital object identifiers) — decode_dois","text":"dois vector DOIs. keep_http Logical argument specifying whether retain http prefix (TRUE) (FALSE). Default set TRUE.","code":""},{"path":"/reference/decode_dois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decode DOIs (digital object identifiers) — decode_dois","text":"vector edited DOIs","code":""},{"path":"/reference/decode_dois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decode DOIs (digital object identifiers) — decode_dois","text":"","code":"if (FALSE) { # \\dontrun{ refs <- synthesisr::read_refs('www/embase.ris') dois <- refs$doi new_dois <- decode_dois(dois, keep_http = FALSE) } # }"},{"path":"/reference/getLENSData.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to query Lens.org — getLENSData","title":"Function to query Lens.org — getLENSData","text":"Function written lens.org use API.","code":""},{"path":"/reference/getLENSData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to query Lens.org — getLENSData","text":"","code":"getLENSData(token, query)"},{"path":"/reference/getLENSData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to query Lens.org — getLENSData","text":"token access key lens.org API. Tokens can obtained applying scholarly API access creating token approved. See 'https://www.lens.org/lens/user/subscriptions#scholar' details. query search string formulated according Lens.org API documentation: 'https://docs.api.lens.org/request-scholar.html'.","code":""},{"path":"/reference/getLENSData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to query Lens.org — getLENSData","text":"summary response. results viewable using 'content(data, \"text\")'. details regarding request (e.g. repsonse times) can accessed main output.","code":""},{"path":"/reference/get_citation.html","id":null,"dir":"Reference","previous_headings":"","what":"Find citation based on identifier — get_citation","title":"Find citation based on identifier — get_citation","text":"Finds citation based e.g. DOI","code":""},{"path":"/reference/get_citation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find citation based on identifier — get_citation","text":"","code":"get_citation(   article_list,   type = \"doi\",   token = \"WCFlpCtuJXYI1sDhZcZ8y7hHpri0SEmTnLNkeU4OEM5JTQRNXB9w\" )"},{"path":"/reference/get_citation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find citation based on identifier — get_citation","text":"article_list List article identifiers reference lists returned. Must list/vector identifiers, e.g. '\"10.1186/s13750-018-0126-2\" \"10.1002/jrsm.1378\"'. type Specification type input provided. default 'doi' (digital object identifier), following accepted: \"pmid\" (PubMed ID), \"pmcid\" (PubMed Central ID), \"magid\" (Microsoft Academic ID), \"coreid\" (CORE identifier), lens_id\" (Lens.org ID), \"title\" (article title; much lower specificity). token access key lens.org API. Tokens can obtained applying scholarly API access creating token approved. See 'https://www.lens.org/lens/user/subscriptions#scholar' details.","code":""},{"path":"/reference/get_citation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find citation based on identifier — get_citation","text":"dataframe containing matching citation Lens.org.","code":""},{"path":"/reference/get_citation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find citation based on identifier — get_citation","text":"","code":"if (FALSE) { # \\dontrun{ article_list <- c(\"10.1007/978-3-642-37048-9_13\", \"10.1111/sum.12030\", \"10.5194/bg-13-3619-2016\", \"10.1016/j.agee.2012.09.006\") results <- get_citation(article_list) articles <- results$display } # }"},{"path":"/reference/get_refs.html","id":null,"dir":"Reference","previous_headings":"","what":"Automated citation chasing in systematic reviews — get_refs","title":"Automated citation chasing in systematic reviews — get_refs","text":"function takes list articles form established identifiers (e.g. digital object identifiers) sends request lens.org API firstly identify cited references articles (form lists lens IDs), query lens IDs bring back full citation information listed records. Deduplicates references records across articles, resulting RIS file summary report console.","code":""},{"path":"/reference/get_refs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automated citation chasing in systematic reviews — get_refs","text":"","code":"get_refs(article_list, type = \"doi\", get_records, save_object = FALSE, token)"},{"path":"/reference/get_refs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automated citation chasing in systematic reviews — get_refs","text":"article_list List article identifiers reference lists returned. Must list/vector identifiers, e.g. '\"10.1186/s13750-018-0126-2\" \"10.1002/jrsm.1378\"'. type Specification type input provided. default 'doi' (digital object identifier), following accepted: \"pmid\" (PubMed ID), \"pmcid\" (PubMed Central ID), \"magid\" (Microsoft Academic ID), \"coreid\" (CORE identifier), lens_id\" (Lens.org ID), \"title\" (article title; much lower specificity). get_records Specification whether look records referenced within input articles ('references'), records citing input articles ('citations'), (''). save_object Option save resultant ris file object Global Environment. default FALSE. token access key lens.org API. Tokens can obtained applying scholarly API access creating token approved. See 'https://www.lens.org/lens/user/subscriptions#scholar' details.","code":""},{"path":"/reference/get_refs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automated citation chasing in systematic reviews — get_refs","text":"RIS file saved working directory. report printed console. 'save_object=TRUE', RIS file returned object","code":""},{"path":"/reference/get_refs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automated citation chasing in systematic reviews — get_refs","text":"","code":"if (FALSE) { # \\dontrun{ article_list <- c(\"10.1007/978-3-642-37048-9_13\",                    \"10.1111/sum.12030\",                    \"10.5194/bg-13-3619-2016\",                    \"10.1016/j.agee.2012.09.006\")   token <- 'token'   refs <- get_refs(article_list, get_records = 'references', token = token)   refs   } # }"},{"path":"/reference/plot_health.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot RIS file health remotes::install_git(","title":"Plot RIS file health remotes::install_git(","text":"Plot RIS file health remotes::install_git(\"https://git.rud./hrbrmstr/ggchicklet.git\") report <- scan_file(refs) health_plot <- plot_health(report) health_plot","code":""},{"path":"/reference/plot_health.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot RIS file health remotes::install_git(","text":"","code":"plot_health(health_check, session = NULL)"},{"path":"/reference/reconstruct_abstract.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert abstract inverted index into full abstract — reconstruct_abstract","title":"Convert abstract inverted index into full abstract — reconstruct_abstract","text":"Convert inverted index abstract words full string corresponding original abstract. Inverted index way abstract broken provided Open Alex API list words locations.","code":""},{"path":"/reference/reconstruct_abstract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert abstract inverted index into full abstract — reconstruct_abstract","text":"","code":"reconstruct_abstract(inverted_index)"},{"path":"/reference/reconstruct_abstract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert abstract inverted index into full abstract — reconstruct_abstract","text":"inverted-index named character vector containing locations integers words. character vector can contain number fields: .e. can full set results returned Open Alex API. character vector named using Open Alex abstract inverted index term naming convention follows: 'abstract_inverted_index_word', word word question. Multiple occurrences word represented multiple named characters, numerical suffix (.e. 'abstract_inverted_index_the1' 'abstract_inverted_index_the2').","code":""},{"path":"/reference/reconstruct_abstract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert abstract inverted index into full abstract — reconstruct_abstract","text":"single character string corresponding original abstract.","code":""},{"path":"/reference/reconstruct_abstract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert abstract inverted index into full abstract — reconstruct_abstract","text":"","code":"if (FALSE) { # \\dontrun{ devtools::install_github(\"kth-library/openalex\", dependencies = TRUE) library(openalex) openalex_polite(\"neal_haddaway@hotmail.com\") input <- data.frame(ids = c('10.1371/journal.pone.0138237', '10.1186/s13750-016-0059-6', 'The role of tourism and recreation in the spread of non-native species: a systematic review and meta-analysis'),                     type = c('doi', 'doi', 'title')) results <- search_openAlex(input) record <- results[['10.1371/journal.pone.0138237']] reconstruct_abstract(record) } # }"},{"path":"/reference/repair_refs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find empty fields across bibliographic data — repair_refs","title":"Find empty fields across bibliographic data — repair_refs","text":"Fill missing information bibliuographic dataset searching Open Alex API. Fill missing information bibliographic dataset searching Open Alex API.","code":""},{"path":"/reference/repair_refs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find empty fields across bibliographic data — repair_refs","text":"","code":"repair_refs(   refs,   replace_abstracts = FALSE,   repair_incomplete = TRUE,   source = \"lens\",   title_search = TRUE,   token = \"NFxMqRTdXCQRq3uDl8NgduSAXcEf5DAqLIBAPALydHloF0n1n2Xi\" )  repair_refs(   refs,   replace_abstracts = FALSE,   repair_incomplete = TRUE,   source = \"lens\",   title_search = TRUE,   token = \"NFxMqRTdXCQRq3uDl8NgduSAXcEf5DAqLIBAPALydHloF0n1n2Xi\" )"},{"path":"/reference/repair_refs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find empty fields across bibliographic data — repair_refs","text":"refs data frame outputted synthesisr.","code":""},{"path":"/reference/repair_refs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find empty fields across bibliographic data — repair_refs","text":"data frame matching input style, containing filled information blanks. multiple matches obtained Open Alex, provided user decide retain. data frame matching input style, containing filled information blanks. multiple matches obtained Open Alex, provided user decide retain.","code":""},{"path":"/reference/repair_refs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find empty fields across bibliographic data — repair_refs","text":"","code":"if (FALSE) { # \\dontrun{ library(openalex) devtools::install_github(\"kth-library/openalex\", dependencies = TRUE) openalex_polite(\"neal_haddaway@hotmail.com\") devtools::install_github(\"massimoaria/openalexR\", dependencies = TRUE) library(openalexR) file <- \"Users/neal.haddaway/OneDrive - SEI/ESHackathon/4.Remote 2020/citationchaser private/archive/inst/shiny-examples/citationchaser/www/references.ris\" refs <- synthesisr::read_refs(file.choose()) repaired_refs <- repair_refs(refs, replace_abstracts = TRUE) } # } if (FALSE) { # \\dontrun{ library(openalexR) file <- file.choose() refs <- synthesisr::read_refs(file) repaired_refs <- repair_refs(refs, replace_abstracts = TRUE, title_search = FALSE) } # }"},{"path":"/reference/runBibfixApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Shiny App — runBibfixApp","title":"Run Shiny App — runBibfixApp","text":"function launches Shiny application specified directory R package.","code":""},{"path":"/reference/runBibfixApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Shiny App — runBibfixApp","text":"","code":"runBibfixApp(app_name = \"bibfix\")"},{"path":"/reference/runBibfixApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Shiny App — runBibfixApp","text":"app_name bibfix","code":""},{"path":"/reference/runBibfixApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Shiny App — runBibfixApp","text":"Launches Shiny application.","code":""},{"path":"/reference/scan_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan RIS file for damage — scan_file","title":"Scan RIS file for damage — scan_file","text":"Scan RIS file damage","code":""},{"path":"/reference/scan_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan RIS file for damage — scan_file","text":"","code":"scan_file(refs)"},{"path":"/reference/scan_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scan RIS file for damage — scan_file","text":"refs RIS file biblographic records","code":""},{"path":"/reference/scan_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scan RIS file for damage — scan_file","text":"","code":"if (FALSE) { # \\dontrun{ library(openalexR) refs <- synthesisr::read_refs(file.choose()) report <- scan_file(refs) } # }"},{"path":"/reference/search_openAlex.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Open Alex API for records matching different identifiers — search_openAlex","title":"Search Open Alex API for records matching different identifiers — search_openAlex","text":"Search Open Alex API bring back records matching one identifiers. Searches based identifier title (separate query type needed ).","code":""},{"path":"/reference/search_openAlex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Open Alex API for records matching different identifiers — search_openAlex","text":"","code":"search_openAlex(input)"},{"path":"/reference/search_openAlex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Open Alex API for records matching different identifiers — search_openAlex","text":"input Two column dataframe consisting one column named 'ids' contains identifiers, including 'doi' (digital object identifier), 'mag' (microsoft academic identifier), 'openalex' (Open Alex identifier), 'pmid' (PubMed identifier), 'pmcid (PubMed Central identifier), 'title' (record title), one column contains corresponding identifier type ID (using names listed ).","code":""},{"path":"/reference/search_openAlex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Open Alex API for records matching different identifiers — search_openAlex","text":"list character vectors named reference items returned Open Alex API.","code":""},{"path":"/reference/search_openAlex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Open Alex API for records matching different identifiers — search_openAlex","text":"","code":"if (FALSE) { # \\dontrun{ devtools::install_github(\"kth-library/openalex\", dependencies = TRUE) library(openalex) openalex_polite(\"neal_haddaway@hotmail.com\") input <- data.frame(ids = c('10.1371/journal.pone.0138237', '10.1186/s13750-016-0059-6', 'The role of tourism and recreation in the spread of non-native species: a systematic review and meta-analysis'),                     type = c('doi', 'doi', 'title')) results <- search_openAlex(input) } # }"}]
